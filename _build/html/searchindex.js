Search.setIndex({"docnames": ["README", "_includes/magnetohydrosensor", "_includes/optimization_placement", "_includes/qml_debugging", "index"], "filenames": ["README.rst", "_includes/magnetohydrosensor.rst", "_includes/optimization_placement.rst", "_includes/qml_debugging.rst", "index.rst"], "titles": ["NYUAD Hackathon for Social Good in the Arab World: Focusing on Quantum Computing (QC) and UN Sustainable Development Goals (SDGs).", "Magnetohydrosensor module", "Optimization placement module", "Debugging module", "NYUAD Hackathon for Social Good in the Arab World: Focusing on Quantum Computing (QC) and UN Sustainable Development Goals (SDGs)."], "terms": {"http": [0, 1, 4], "nyu": [0, 4], "edu": [0, 4], "en": [0, 4], "event": [0, 4], "2022": 0, "march": 0, "html": [0, 1, 4], "creat": [0, 2, 3], "program": 0, "appli": 0, "one": 0, "more": [0, 4], "problem": [0, 2, 3], "your": 0, "choic": 0, "shor": 0, "": [0, 1, 3], "grover": 0, "search": [0, 4], "variat": [0, 1, 4], "eigensolv": [0, 4], "vqe": [0, 2, 4], "approxim": [0, 4], "qaoa": [0, 2, 4], "The": [0, 2, 3, 4], "i": [0, 1, 2, 3, 4], "diagnosi": 0, "graph": [0, 2], "base": [0, 1, 2, 3, 4], "network": [0, 2, 3, 4], "implement": [0, 3, 4], "explain": 0, "paper": 0, "requir": [0, 4], "instal": 0, "pyqubo": 0, "pip": [0, 4], "input": [0, 1, 2, 3], "read": [0, 4], "path": [0, 4], "from": [0, 1, 2, 3, 4], "sourc": [0, 4], "compar": [0, 4], "ar": [0, 1, 3, 4], "invas": [0, 4], "thei": [0, 4], "also": [0, 2, 4], "toler": [0, 4], "chang": [0, 4], "environ": [0, 4], "around": [0, 4], "while": [0, 3, 4], "being": [0, 4], "accur": [0, 4], "thi": [0, 1, 2, 3, 4], "improv": [0, 4], "abil": [0, 4], "pipe": [0, 2, 4], "leakag": [0, 4], "exist": [0, 4], "literatur": [0, 4], "suggest": [0, 4], "predict": [0, 3, 4], "localis": [0, 4], "particular": [0, 4], "data": [0, 2, 3, 4], "wdn": [0, 4], "ani": [0, 2, 4], "given": [0, 4], "point": [0, 4], "time": [0, 4], "we": [0, 1, 4], "attempt": [0, 4], "solv": [0, 2, 4], "same": [0, 4], "model": [0, 3, 4], "specif": [0, 4], "collect": [0, 4], "place": [0, 4], "water": [0, 4], "distribut": [0, 1, 4], "neural": [0, 3, 4], "It": [0, 4], "pennylan": [0, 3, 4], "framework": [0, 4], "jax": [0, 3, 4], "fed": [0, 3, 4], "angl": [0, 4], "encod": [0, 1, 4], "compos": [0, 4], "parametris": [0, 4], "circuit": [0, 1, 3, 4], "ry": [0, 4], "rz": [0, 4], "cnot": [0, 4], "gate": [0, 4], "which": [0, 2, 3, 4], "train": [0, 3, 4], "over": [0, 4], "total": [0, 4], "500": [0, 4], "epoch": [0, 3, 4], "test": [0, 3, 4], "set": [0, 4], "ratio": [0, 4], "4": [0, 4], "1": [0, 4], "optimis": [0, 4], "rectifi": [0, 4], "adam": [0, 4], "binari": [0, 3, 4], "cross": [0, 4], "entropi": [0, 4], "loss": [0, 1, 3, 4], "At": [0, 4], "end": [0, 4], "obtain": [0, 4], "accuraci": [0, 3, 4], "87": [0, 4], "02": [0, 4], "dataset": [0, 4], "size": [0, 4], "650": [0, 4], "code": [1, 3], "wa": 1, "taken": 1, "qml": [1, 4], "baidu": 1, "com": 1, "tutori": 1, "quantum": [1, 2, 3], "simul": 1, "metrologi": 1, "2": 1, "sensor": [1, 2, 3], "ve": 1, "modifid": 1, "ad": 1, "class": [1, 2, 3], "call": [1, 2], "take": 1, "number": 1, "method": [1, 2], "list": [1, 3], "magnet": 1, "field": 1, "us": [1, 2, 3], "calibr": 1, "increas": 1, "sensitv": 1, "mse": [1, 4], "qnn": [1, 3], "layer": [1, 3], "phi": 1, "float": [1, 2, 3], "tensor": 1, "calcul": [1, 3], "paramet": [1, 2, 3], "cir": 1, "ramsei": 1, "interferomet": 1, "unknown": 1, "estim": 1, "return": [1, 2, 3], "default_field": 1, "0": [1, 2], "sensors_count": 1, "10": 1, "object": [1, 2], "feedback_loop": 1, "sensors_field": 1, "plot": [1, 2], "ramseycircuit": [1, 4], "theta_en": 1, "theta_d": 1, "input_phi": 1, "construct": 1, "shape": 1, "depth_en": 1, "num_qubit": 1, "3": 1, "decod": 1, "circui": 1, "depth_d": 1, "ramseyinterferomet": [1, 4], "forward": [1, 3], "fields_list": 1, "opt": 1, "none": [1, 2], "optim": [1, 3], "calculate_m": [1, 4], "int": [1, 3, 4], "loss_func": [1, 4], "magnetic_fields_list": 1, "sampling_tim": 1, "partit": 1, "select": 1, "interv": 1, "mean": 1, "normal": 1, "varianc": 1, "num_itr": 1, "learning_r": 1, "iter": [1, 3], "learn": [1, 3], "rate": 1, "std_dev": [1, 4], "function": [1, 2, 3], "standard": 1, "deviat": [1, 4], "std_mean": [1, 4], "In": 2, "script": 2, "sensorplac": [2, 4], "defin": [2, 3], "includ": 2, "sever": 2, "convert": 2, "datafram": 2, "add": 2, "attribut": 2, "gener": [2, 3], "differ": 2, "factor": 2, "central": 2, "access": 2, "here": [2, 3], "brief": [2, 3], "descript": 2, "each": 2, "convert_oopnet_junctions_to_df": [2, 4], "net": 2, "junction": 2, "an": 2, "oopnet": 2, "convert_oopnet_nodes_to_df": [2, 4], "default_elev": 2, "default_demand": 2, "node": 2, "default": 2, "elev": 2, "demand": 2, "valu": [2, 3], "drop_i": [2, 4], "df": 2, "drop": 2, "column": 2, "_y": 2, "suffix": 2, "add_attribut": [2, 4], "g": 2, "xcoord": 2, "ycoord": 2, "generate_centrality_factor": [2, 4], "edges_attr": 2, "edg": 2, "diameter_length_factor": [2, 4], "diamet": 2, "length": 2, "create_edge_weight": [2, 4], "A": 2, "b": 2, "weight": [2, 3], "generate_accessibility_factor": [2, 4], "p": 2, "probabl": 2, "plot_network": [2, 4], "plot_nam": 2, "ha": [2, 3, 4], "run": 2, "algorithm": 2, "well": 2, "classic": [2, 3], "sensorplacementresult": [2, 4], "manag": [2, 4], "result": 2, "optimization_plac": 2, "param": [2, 3], "required_param": 2, "nb_sensor": 2, "gen_quadratic_program": 2, "quadraticprogram": 2, "generate_coeffic": 2, "tupl": 2, "dict": 2, "str": 2, "properti": 2, "lin_term": 2, "offset": 2, "quadratic_program": 2, "quadratic_term": 2, "variou": 2, "_result": 2, "type": [2, 3], "run_class": 2, "label": 2, "option": 2, "run_qaoa": 2, "quantum_inst": 2, "quantuminst": 2, "instanc": 2, "run_vq": 2, "convert_oopnet_pipes_to_df": [2, 4], "create_graph": [2, 4], "get_df_from_oopnet_nod": [2, 4], "rename_x": [2, 4], "renam": 2, "_x": 2, "hybrid": 3, "machin": 3, "classif": 3, "task": [3, 4], "process": 3, "pressur": 3, "like": [3, 4], "some": 3, "sort": 3, "physic": 3, "system": [3, 4], "part": 3, "feedforward": 3, "fnn": 3, "two": 3, "hidden": 3, "explan": 3, "structur": 3, "import": 3, "necessari": 3, "librari": 3, "tool": 3, "haiku": 3, "optax": 3, "etc": 3, "load": 3, "comment": 3, "out": 3, "provid": 3, "entir": 3, "pass": 3, "qforward": 3, "cforward": 3, "initi": 3, "loss_fn": [3, 4], "between": 3, "output": 3, "ground": 3, "truth": 3, "updat": [3, 4], "gradient": 3, "loop": 3, "through": 3, "shuffl": 3, "print": 3, "potenti": 3, "leverag": 3, "advantag": 3, "comput": 3, "certain": 3, "still": 3, "util": 3, "resourc": 3, "other": [3, 4], "all": 3, "handl": 3, "simplifi": 3, "integr": 3, "qml_debug": 3, "x": 3, "y": 3, "after": 3, "quantum_circuit": [3, 4], "circuit_weight": 3, "build": 3, "expect": 3, "qubit": 3, "measur": 3, "pauliz": 3, "basi": 3, "quantum_lay": [3, 4], "opt_stat": 3, "state": 3, "last": 3, "new": 3, "2023": 4, "april": 4, "solut": 4, "distibut": 4, "debug": 4, "buzz": 4, "word": 4, "qubo": 4, "pip3": 4, "r": 4, "txt": 4, "conda": 4, "user": 4, "pleas": 4, "make": 4, "sure": 4, "abov": 4, "sampl": 4, "dewa": 4, "site": 4, "under": 4, "paywal": 4, "been": 4, "challeng": 4, "committe": 4, "real": 4, "life": 4, "can": 4, "identifi": 4, "done": 4, "both": 4, "hacker": 4, "ana": 4, "basant": 4, "moham": 4, "airin": 4, "lakshika": 4, "sanjana": 4, "mentor": 4, "fouad": 4, "el": 4, "amin": 4, "victori": 4, "akash": 4, "kant": 4, "And": 4, "thank": 4, "you": 4, "oragnis": 4, "qbraid": 4, "student": 4, "who": 4, "made": 4, "possibl": 4, "great": 4, "modul": 4, "magnetohydrosensor": 4, "placement": 4, "index": 4, "page": 4}, "objects": {"": [[1, 0, 0, "-", "magnetohydrosensor"], [2, 0, 0, "-", "optimization_placement"], [3, 0, 0, "-", "qml_debugging"]], "magnetohydrosensor": [[1, 1, 1, "", "MSE"], [1, 2, 1, "", "MagnetoHydroSensor"], [1, 1, 1, "", "RamseyCircuit"], [1, 2, 1, "", "RamseyInterferometer"], [1, 1, 1, "", "calculate_m"], [1, 1, 1, "", "loss_func"], [1, 1, 1, "", "optimization"], [1, 1, 1, "", "std_dev"], [1, 1, 1, "", "std_mean"]], "magnetohydrosensor.MagnetoHydroSensor": [[1, 3, 1, "", "feedback_loop"], [1, 3, 1, "", "plot"]], "magnetohydrosensor.RamseyInterferometer": [[1, 3, 1, "", "forward"], [1, 3, 1, "", "opt"]], "optimization_placement": [[2, 2, 1, "", "SensorPlacement"], [2, 2, 1, "", "SensorPlacementResults"], [2, 1, 1, "", "add_attributes"], [2, 1, 1, "", "convert_oopnet_junctions_to_df"], [2, 1, 1, "", "convert_oopnet_nodes_to_df"], [2, 1, 1, "", "convert_oopnet_pipes_to_df"], [2, 1, 1, "", "create_edge_weight"], [2, 1, 1, "", "create_graph"], [2, 1, 1, "", "diameter_length_factor"], [2, 1, 1, "", "drop_y"], [2, 1, 1, "", "generate_accessibility_factor"], [2, 1, 1, "", "generate_centrality_factor"], [2, 1, 1, "", "get_df_from_oopnet_nodes"], [2, 1, 1, "", "plot_network"], [2, 1, 1, "", "rename_x"]], "optimization_placement.SensorPlacement": [[2, 4, 1, "", "REQUIRED_PARAMS"], [2, 3, 1, "", "gen_quadratic_program"], [2, 3, 1, "", "generate_coefficent"], [2, 5, 1, "", "lin_terms"], [2, 5, 1, "", "offset"], [2, 5, 1, "", "quadratic_program"], [2, 5, 1, "", "quadratic_terms"]], "optimization_placement.SensorPlacementResults": [[2, 4, 1, "", "_results"], [2, 5, 1, "", "results"], [2, 3, 1, "", "run_classical"], [2, 3, 1, "", "run_qaoa"], [2, 3, 1, "", "run_vqe"]], "qml_debugging": [[3, 1, 1, "", "loss_fn"], [3, 1, 1, "", "quantum_circuit"], [3, 1, 1, "", "quantum_layer"], [3, 1, 1, "", "update"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:attribute", "5": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"]}, "titleterms": {"nyuad": [0, 4], "hackathon": [0, 4], "social": [0, 4], "good": [0, 4], "arab": [0, 4], "world": [0, 4], "focus": [0, 4], "quantum": [0, 4], "comput": [0, 4], "qc": [0, 4], "un": [0, 4], "sustain": [0, 4], "develop": [0, 4], "goal": [0, 4], "sdg": [0, 4], "technic": 0, "challeng": 0, "algorithm": [0, 4], "exampl": 0, "qubo": 0, "fault": 0, "detect": [0, 4], "replac": [0, 4], "classic": [0, 4], "pressur": [0, 4], "sensor": [0, 4], "optim": [0, 2, 4], "leak": [0, 4], "local": [0, 4], "us": [0, 4], "machin": [0, 4], "learn": [0, 4], "magnetohydrosensor": 1, "modul": [1, 2, 3], "placement": 2, "debug": 3, "motiv": 4, "instal": 4, "instruct": 4, "input": 4, "program": 4, "acknowledg": 4, "detail": 4, "document": 4, "content": 4, "indic": 4, "tabl": 4}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"NYUAD Hackathon for Social Good in the Arab World: Focusing on Quantum Computing (QC) and UN Sustainable Development Goals (SDGs).": [[0, "nyuad-hackathon-for-social-good-in-the-arab-world-focusing-on-quantum-computing-qc-and-un-sustainable-development-goals-sdgs"], [4, "nyuad-hackathon-for-social-good-in-the-arab-world-focusing-on-quantum-computing-qc-and-un-sustainable-development-goals-sdgs"]], "Technical challenge": [[0, "technical-challenge"]], "Quantum algorithm examples": [[0, "quantum-algorithm-examples"]], "Qubo Fault Detection": [[0, "qubo-fault-detection"]], "Replacing Classical Pressure Sensors with Optimized Quantum Sensors": [[0, "replacing-classical-pressure-sensors-with-optimized-quantum-sensors"], [4, "replacing-classical-pressure-sensors-with-optimized-quantum-sensors"]], "Leak Detection and Localization": [[0, "leak-detection-and-localization"], [4, "leak-detection-and-localization"]], "Using Quantum Machine Learning": [[0, "using-quantum-machine-learning"], [4, "using-quantum-machine-learning"]], "Magnetohydrosensor module": [[1, "module-magnetohydrosensor"]], "Optimization placement module": [[2, "optimization-placement-module"]], "Debugging module": [[3, "debugging-module"]], "Motivation": [[4, "motivation"]], "Quantum algorithm:": [[4, "quantum-algorithm"]], "Installation Instructions:": [[4, "installation-instructions"]], "Input to the program:": [[4, "input-to-the-program"]], "Acknowledgements": [[4, "acknowledgements"]], "Detailed Documentation": [[4, "detailed-documentation"]], "Contents:": [[4, null]], "Indices and tables": [[4, "indices-and-tables"]]}, "indexentries": {"mse() (in module magnetohydrosensor)": [[1, "magnetohydrosensor.MSE"]], "magnetohydrosensor (class in magnetohydrosensor)": [[1, "magnetohydrosensor.MagnetoHydroSensor"]], "ramseycircuit() (in module magnetohydrosensor)": [[1, "magnetohydrosensor.RamseyCircuit"]], "ramseyinterferometer (class in magnetohydrosensor)": [[1, "magnetohydrosensor.RamseyInterferometer"]], "calculate_m() (in module magnetohydrosensor)": [[1, "magnetohydrosensor.calculate_m"]], "feedback_loop() (magnetohydrosensor.magnetohydrosensor method)": [[1, "magnetohydrosensor.MagnetoHydroSensor.feedback_loop"]], "forward() (magnetohydrosensor.ramseyinterferometer method)": [[1, "magnetohydrosensor.RamseyInterferometer.forward"]], "loss_func() (in module magnetohydrosensor)": [[1, "magnetohydrosensor.loss_func"]], "magnetohydrosensor": [[1, "module-magnetohydrosensor"]], "module": [[1, "module-magnetohydrosensor"], [2, "module-optimization_placement"], [3, "module-qml_debugging"]], "opt() (magnetohydrosensor.ramseyinterferometer method)": [[1, "magnetohydrosensor.RamseyInterferometer.opt"]], "optimization() (in module magnetohydrosensor)": [[1, "magnetohydrosensor.optimization"]], "plot() (magnetohydrosensor.magnetohydrosensor method)": [[1, "magnetohydrosensor.MagnetoHydroSensor.plot"]], "std_dev() (in module magnetohydrosensor)": [[1, "magnetohydrosensor.std_dev"]], "std_mean() (in module magnetohydrosensor)": [[1, "magnetohydrosensor.std_mean"]], "required_params (optimization_placement.sensorplacement attribute)": [[2, "optimization_placement.SensorPlacement.REQUIRED_PARAMS"]], "sensorplacement (class in optimization_placement)": [[2, "optimization_placement.SensorPlacement"]], "sensorplacementresults (class in optimization_placement)": [[2, "optimization_placement.SensorPlacementResults"]], "_results (optimization_placement.sensorplacementresults attribute)": [[2, "optimization_placement.SensorPlacementResults._results"]], "add_attributes() (in module optimization_placement)": [[2, "optimization_placement.add_attributes"]], "convert_oopnet_junctions_to_df() (in module optimization_placement)": [[2, "optimization_placement.convert_oopnet_junctions_to_df"]], "convert_oopnet_nodes_to_df() (in module optimization_placement)": [[2, "optimization_placement.convert_oopnet_nodes_to_df"]], "convert_oopnet_pipes_to_df() (in module optimization_placement)": [[2, "optimization_placement.convert_oopnet_pipes_to_df"]], "create_edge_weight() (in module optimization_placement)": [[2, "optimization_placement.create_edge_weight"]], "create_graph() (in module optimization_placement)": [[2, "optimization_placement.create_graph"]], "diameter_length_factor() (in module optimization_placement)": [[2, "optimization_placement.diameter_length_factor"]], "drop_y() (in module optimization_placement)": [[2, "optimization_placement.drop_y"]], "gen_quadratic_program() (optimization_placement.sensorplacement method)": [[2, "optimization_placement.SensorPlacement.gen_quadratic_program"]], "generate_accessibility_factor() (in module optimization_placement)": [[2, "optimization_placement.generate_accessibility_factor"]], "generate_centrality_factor() (in module optimization_placement)": [[2, "optimization_placement.generate_centrality_factor"]], "generate_coefficent() (optimization_placement.sensorplacement method)": [[2, "optimization_placement.SensorPlacement.generate_coefficent"]], "get_df_from_oopnet_nodes() (in module optimization_placement)": [[2, "optimization_placement.get_df_from_oopnet_nodes"]], "lin_terms (optimization_placement.sensorplacement property)": [[2, "optimization_placement.SensorPlacement.lin_terms"]], "offset (optimization_placement.sensorplacement property)": [[2, "optimization_placement.SensorPlacement.offset"]], "optimization_placement": [[2, "module-optimization_placement"]], "plot_network() (in module optimization_placement)": [[2, "optimization_placement.plot_network"]], "quadratic_program (optimization_placement.sensorplacement property)": [[2, "optimization_placement.SensorPlacement.quadratic_program"]], "quadratic_terms (optimization_placement.sensorplacement property)": [[2, "optimization_placement.SensorPlacement.quadratic_terms"]], "rename_x() (in module optimization_placement)": [[2, "optimization_placement.rename_x"]], "results (optimization_placement.sensorplacementresults property)": [[2, "optimization_placement.SensorPlacementResults.results"]], "run_classical() (optimization_placement.sensorplacementresults method)": [[2, "optimization_placement.SensorPlacementResults.run_classical"]], "run_qaoa() (optimization_placement.sensorplacementresults method)": [[2, "optimization_placement.SensorPlacementResults.run_qaoa"]], "run_vqe() (optimization_placement.sensorplacementresults method)": [[2, "optimization_placement.SensorPlacementResults.run_vqe"]], "loss_fn() (in module qml_debugging)": [[3, "qml_debugging.loss_fn"]], "qml_debugging": [[3, "module-qml_debugging"]], "quantum_circuit() (in module qml_debugging)": [[3, "qml_debugging.quantum_circuit"]], "quantum_layer() (in module qml_debugging)": [[3, "qml_debugging.quantum_layer"]], "update() (in module qml_debugging)": [[3, "qml_debugging.update"]]}})